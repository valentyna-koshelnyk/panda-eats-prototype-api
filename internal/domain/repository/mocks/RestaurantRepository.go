// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/valentyna-koshelnyk/panda-eats-prototype-api/internal/domain/entity"
)

// RestaurantRepository is an autogenerated mock type for the RestaurantRepository type
type RestaurantRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: restaurant
func (_m *RestaurantRepository) Create(restaurant entity.Restaurant) error {
	ret := _m.Called(restaurant)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Restaurant) error); ok {
		r0 = rf(restaurant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *RestaurantRepository) Delete(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterRestaurants provides a mock function with given fields: category, zip, priceRange
func (_m *RestaurantRepository) FilterRestaurants(category string, zip string, priceRange string) ([]entity.Restaurant, error) {
	ret := _m.Called(category, zip, priceRange)

	if len(ret) == 0 {
		panic("no return value specified for FilterRestaurants")
	}

	var r0 []entity.Restaurant
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]entity.Restaurant, error)); ok {
		return rf(category, zip, priceRange)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []entity.Restaurant); ok {
		r0 = rf(category, zip, priceRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Restaurant)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(category, zip, priceRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *RestaurantRepository) GetAll() ([]entity.Restaurant, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.Restaurant
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Restaurant, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Restaurant); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Restaurant)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: res
func (_m *RestaurantRepository) Update(res entity.Restaurant) error {
	ret := _m.Called(res)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Restaurant) error); ok {
		r0 = rf(res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRestaurantRepository creates a new instance of RestaurantRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRestaurantRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RestaurantRepository {
	mock := &RestaurantRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
