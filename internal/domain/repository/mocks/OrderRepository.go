// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/valentyna-koshelnyk/panda-eats-prototype-api/internal/domain/entity"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: order
func (_m *OrderRepository) CreateOrder(order entity.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderHistory provides a mock function with given fields: userID
func (_m *OrderRepository) GetOrderHistory(userID string) ([]entity.Order, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderHistory")
	}

	var r0 []entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.Order, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.Order); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderInformation provides a mock function with given fields: userID, orderID
func (_m *OrderRepository) GetOrderInformation(userID string, orderID string) (*entity.Order, error) {
	ret := _m.Called(userID, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderInformation")
	}

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*entity.Order, error)); ok {
		return rf(userID, orderID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *entity.Order); ok {
		r0 = rf(userID, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderStatus provides a mock function with given fields: order
func (_m *OrderRepository) UpdateOrderStatus(order *entity.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
