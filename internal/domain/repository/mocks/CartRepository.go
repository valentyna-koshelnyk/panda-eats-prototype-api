// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/valentyna-koshelnyk/panda-eats-prototype-api/internal/domain/entity"
)

// CartRepository is an autogenerated mock type for the CartRepository type
type CartRepository struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: cart
func (_m *CartRepository) AddItem(cart entity.Cart) error {
	ret := _m.Called(cart)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Cart) error); ok {
		r0 = rf(cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCartItem provides a mock function with given fields: userID, itemID
func (_m *CartRepository) GetCartItem(userID string, itemID string) (*entity.Cart, error) {
	ret := _m.Called(userID, itemID)

	if len(ret) == 0 {
		panic("no return value specified for GetCartItem")
	}

	var r0 *entity.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*entity.Cart, error)); ok {
		return rf(userID, itemID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *entity.Cart); ok {
		r0 = rf(userID, itemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, itemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartItems provides a mock function with given fields: UserID
func (_m *CartRepository) GetCartItems(UserID string) ([]entity.Cart, error) {
	ret := _m.Called(UserID)

	if len(ret) == 0 {
		panic("no return value specified for GetCartItems")
	}

	var r0 []entity.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.Cart, error)); ok {
		return rf(UserID)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.Cart); ok {
		r0 = rf(UserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(UserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveItem provides a mock function with given fields: itemID, userID
func (_m *CartRepository) RemoveItem(itemID string, userID string) error {
	ret := _m.Called(itemID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(itemID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCartItems provides a mock function with given fields: userID, item
func (_m *CartRepository) UpdateCartItems(userID string, item entity.Cart) error {
	ret := _m.Called(userID, item)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCartItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entity.Cart) error); ok {
		r0 = rf(userID, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCartRepository creates a new instance of CartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCartRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CartRepository {
	mock := &CartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
