// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	utils "github.com/valentyna-koshelnyk/panda-eats-prototype-api/utils"
)

// MenuService is an autogenerated mock type for the MenuService type
type MenuService struct {
	mock.Mock
}

// GetMenu provides a mock function with given fields: id
func (_m *MenuService) GetMenu(id int64) (*utils.PaginatedResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetMenu")
	}

	var r0 *utils.PaginatedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*utils.PaginatedResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *utils.PaginatedResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.PaginatedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMenuService creates a new instance of MenuService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMenuService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MenuService {
	mock := &MenuService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
